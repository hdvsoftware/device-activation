@inherits BlazorLayoutComponent

@using MoHIS.Activation.Portal.Blazor.Client.Utils
@using MoHIS.Activation.Shared.Models

@inject MoHIS.Activation.Portal.Blazor.Client.AppState AppState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject MoHIS.Activation.Portal.Blazor.Client.DataAccess.IApiClient ApiClient
@*//@if (AppState.IsSignedIn) {*@
@if (session == null) {
    <div class="main">
        @Body
        @*<h1>Login</h1>

        <div>
            <div>Username: <input type="text" bind="@Username" /></div>
            <div>Password: <input type="password" bind="@Password" /></div>
            <div><input type="button" value="Login" onclick="@Submit" /></div>

        </div>*@
    </div>
} else {
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
}

@functions {
    //LoginRequest loginRequest = new LoginRequest();
    private string Username { get; set; } = "";
    private string Password { get; set; } = "";
    bool IsLoggedIn { get; set; } = false;
    string token = null;

    Session session = null;

    public class Session {
        public string Token { get; set; }
    }

    protected override async Task OnInitAsync() {
        string logintoken = await JavascriptInterop.GetStoredToken();
        if ("null".Equals(logintoken, StringComparison.InvariantCultureIgnoreCase)) {
            await JavascriptInterop.DeleteStoredToken();
            logintoken = null;
        }

        session = new Session() {
            Token = logintoken
        };
        token = logintoken;
        //IsLoggedIn = !string.IsNullOrEmpty(logintoken);
        //await JavascriptInterop.logToJavascript($"MainLayout:IsLoggedIn:{IsLoggedIn}");
        //if (IsLoggedIn) {
        //    UriHelper.NavigateTo("/index");
        //}

    }

    async Task Submit() {

        LoginRequest loginRequest = new LoginRequest() {
            username = Username,
            password = Password
        };

        var loginResponse = await ApiClient.LoginAsync(loginRequest);
        if (loginResponse == null) {
            //toon fout?
            throw new Exception("login failed");
        }
        await AppState.SignIn(loginResponse.Token);
        //await JavascriptInterop.SaveToken(loginResponse.Token);
        //UriHelper.NavigateTo("/index");
        //UriHelper.NavigateTo("/customers");
        UriHelper.NavigateTo("/index");

    }

}
